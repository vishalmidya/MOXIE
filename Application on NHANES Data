################################
## Read the NHANES data

ecc <- read.csv("...\\ecc_nhanes_17_18.csv")
exposures_PFAS = c("LBXPFDE","LBXPFHS","LBXMPAH","LBXPFNA","LBXPFUA","LBXNFOA","LBXNFOS","LBXMFOS")
exposures_METALS <- c("LBXBCD","LBXBPB","LBXBMN","LBXTHG","LBXBSE")
ecc$RIDRETH1 <- as.character(ecc$RIDRETH1)
exposure_metals_pfas <- c(exposures_PFAS, exposures_METALS)

################################
# Fit a gWQS model

wqs_whole <- gwqsrh(LBDLDL ~ wqs + RIAGENDR + RIDAGEYR + INDFMPIR  + hispanic  + black 
                    + smoking_status  + alcohol + act, mix_name = exposure_metals_pfas, data = ecc,
                    rh = 100,
                    q = 10, validation = 0.25, b = 500, b1_pos = T, signal = "t2", rs = T,
                    family = "gaussian", seed = 123123123, plan_strategy = "multicore")

################################
## Covariate balancing

ecc$c_pfas_metal_wqs <- ifelse(ecc$pfas_metal_wqs > median(ecc$pfas_metal_wqs), 1,0)
m.f <- matchit(c_pfas_metal_wqs ~  RIAGENDR + RIDAGEYR + INDFMPIR  + hispanic  + black + BMXBMI
               + smoking_status + SY + DI + alcohol + act, data = ecc,
               discard = "both", method = "subclass", distance = "glm")


library(cobalt)
plt <- cobalt::love.plot(m.f)
plt + labs(title  = "caliper = 1 ", x= "Standardized Mean Difference") + geom_vline(xintercept  = 0.1 , linetype="dotted",  color = "black", size=1.5) + geom_vline(xintercept  = -0.1 , linetype="dotted", color = "black", size=1.5)

################################
## Extract matched data

m.f.matched <- match.data(m.f)
ecc <- ecc[ecc$SEQN %in% m.f.matched$SEQN,]

################################
## Extract Residuals

f <- lm(LBDLDL ~ pfas_metal_wqs + RIAGENDR + RIDAGEYR + INDFMPIR  + hispanic  + black 
        + smoking_status + alcohol + act, data = ecc, weight = WTMEC2YR)
summary(f)
ecc$resids <- f$residuals

################################
## Fit MOXIE Algorithm

M <- 5000
cv.nrounds <- 20
iter_max_depth <- 4
n = nrow(ecc)

  c_wwr <- data.frame(unique_signature = NA_character_,  Features = NA_character_, Split = NA_character_, Direction = NA_character_,
                      Quality = NA_real_, length_feature_size = NA_real_, length_uniques_feature_size = NA_real_, stability = NA_real_, 
                      n_people = NA_real_,
                      beta= NA_real_, 
                      unique_split = NA_character_, p2n_ratio = NA_real_, stability_perc  = NA_real_, max_depth = NA_real_) 
  
  for(m in 2:iter_max_depth){
    
    max_depth = m
    
    moxie_table <- data.frame(Features = NA_character_, Split = NA_character_, Direction = NA_character_,
                              Quality = NA_real_)
    for(i in 1:M){
      
      data_sim_boot <- ecc[sample(rownames(ecc), nrow(ecc)*0.75),]
      d_data_sim_frame <- data_sim_boot
      d_data_sim_matrix <- as.matrix(data_sim_boot[,(colnames(data_sim_boot) %in% c("LBXPFDE","LBXPFHS","LBXMPAH","LBXPFNA","LBXPFUA","LBXNFOA","LBXNFOS","LBXMFOS",
                                                                                    "LBXBCD","LBXBPB","LBXBMN","LBXTHG","LBXBSE"))])
      
      for(j in 1:cv.nrounds){
        
        param <- list(max_depth = max_depth,
                      nthread = 1,
                      eta = sample(c(0.1,0.2),1),
                      min_child_weight=sample(c(1,2),1),
                      subsample = sample(seq(0.5,0.9,0.1),1),
                      colsample_bytree = sample(seq(0.5,0.9,0.1),1),
                      colsample_bylevel= sample(seq(0.5,0.9,0.1),1), 
                      colsample_bynode= sample(seq(0.5,0.9,0.1),1)) 
        
        tryCatch({
          xgboost_model <- xgboost(data = d_data_sim_matrix, label = d_data_sim_frame$resids, params = param, verbose = F, nrounds = cv.nrounds, 
                                   objective = "reg:squarederror", eval_metric  = "rmse")
        }, error=function(e){})
        
        
        rt <- tryCatch({
          xgb_tree <- as.data.frame(xgb.model.dt.tree(feature_names = c("LBXPFDE","LBXPFHS","LBXMPAH","LBXPFNA","LBXPFUA","LBXNFOA","LBXNFOS","LBXMFOS",
                                                                        "LBXBCD","LBXBPB","LBXBMN","LBXTHG","LBXBSE"),
                                                      model = xgboost_model, trees = j))
        }, error=function(e){})
        
        
        if(!is.null(rt)){
          ttt <- as.data.frame(xgb_tree)
          
          t_more <- ttt[1,]
          while (t_more$Feature[length(t_more$Feature)] != "Leaf"){
            t_more <- rbind(t_more, ttt[ttt$ID ==  t_more[nrow(t_more),"No"],]) 
          }
          
          moxie_table <- rbind(moxie_table, c(paste(t_more$Feature[1:(length(t_more$Feature) - 1)],collapse = "/"),
                                              paste(t_more$Split[1:(length(t_more$Feature) - 1)],collapse = "/"),
                                              "Greater", t_more$Quality[t_more$Feature == "Leaf"]))
        }
        
      }
    }
    
    moxie_table <- moxie_table[-1,]
    
    moxie_table$unique_signature <- rep(NA_character_, nrow(moxie_table))
    moxie_table$length_feature_size <-rep(NA_real_, nrow(moxie_table))  
    
    for(i in 1:nrow(moxie_table)){
      xy <- strsplit(moxie_table$Features[i],"/")[[1]]
      moxie_table$length_feature_size[i]  <- length(xy)
      
      xx <- unique(xy)
      moxie_table$length_uniques_feature_size[i]  <- length(xx)
      moxie_table$unique_signature[i] <- paste(levels(as.factor(xx)), collapse = "/")
    }
    
    fds <- (table(moxie_table$length_feature_size))
    
    freq <- as.numeric(sort(table(moxie_table$unique_signature), decreasing = T))
    sss <- names(sort(table(moxie_table$unique_signature), decreasing = T))
    
    data0 <- data.frame(unique_signature = sss,  stability = freq)
    ddft <- (merge(moxie_table, data0, by   = "unique_signature"))
    
    
    potential_moxie_table <- ddft[ddft$length_uniques_feature_size>1 & !is.na(ddft$Features),]
    potential_moxie_table$n_people <- rep(NA_real_,nrow(potential_moxie_table))
    potential_moxie_table$beta <- rep(NA_real_,nrow(potential_moxie_table))
    
    data_sim_moxie <- ecc
    
    for(i in 1:nrow(potential_moxie_table)){
      
      dd <- data_sim_moxie[,strsplit(potential_moxie_table$Features[i],"/")[[1]]]
      x <-  as.numeric(strsplit(potential_moxie_table$Split[i],"/")[[1]])
      ww <- rep(NA_real_, nrow(data_sim_moxie))
      for(k in 1:length(x)){
        if(length(x) == 1){
          yy <- dd >= x[k] 
          yy <- yy + 0
          ww <- cbind(ww , yy)
        }
        else {
          yy <- dd[,k] >= x[k] 
          yy <- yy + 0
          ww <- cbind(ww , yy)
        }
      }
      
      ww <- rowSums(ww, na.rm = T)
      potential_moxie_table$n_people[i] <- length(ww[ww == length(x)])
      
      if( potential_moxie_table$n_people[i]  > nrow(ecc) * 0.05){
        ww <- ifelse(ww == length(x), 1, 0)
        data_sim_moxie$new_mox <- ww
        ss <- summary(lm(LBDLDL ~ new_mox + pfas_metal_wqs + RIAGENDR + RIDAGEYR + INDFMPIR  + hispanic  + black 
                         + smoking_status + alcohol + act, data = data_sim_moxie, weight = WTMEC2YR))
        
        potential_moxie_table$beta[i] <- ss$coefficients[2,1]
        
      }
      
    }
    
    
    ttp <- potential_moxie_table[!is.na(potential_moxie_table$beta)  & 
                                   potential_moxie_table$beta > 0 & potential_moxie_table$n_people > nrow(ecc) * 0.10 & potential_moxie_table$length_feature_size == max_depth,]
    ttp <- ttp[ttp$stability >= quantile(ttp$stability, 0.95) ,]
    ttp <- ttp[ttp$beta >= quantile(ttp$beta, 0.95),]
    if(!is.na(nrow(ttp))){
      uni <- unique(ttp$unique_signature)
      for(i in 1:nrow(ttp)){
        rt = rep(NA_real_,length(strsplit(ttp$unique_signature[i],"/")[[1]]))
        for(j in 1:length(strsplit(ttp$unique_signature[i],"/")[[1]])){
          x = strsplit(ttp$unique_signature[i],"/")[[1]]
          rt[j] = max(as.numeric(strsplit(ttp$Split[i],"/")[[1]][which(strsplit(ttp$Features[i],"/")[[1]] %in% x[j])]))
        }
        ttp$unique_split[i] =  paste(rt,collapse =  "/")    
      }
    }
    wwr <- ttp[1,]
    for(i in 1:length(uni)){
      wwr <- rbind(wwr, ttp[which(ttp$unique_signature %in% uni[i])[which.max(ttp[which(ttp$unique_signature %in% uni[i]),"stability"])],])
    }
    wwr <- wwr[-1,]
    
    dft <- potential_moxie_table[!is.na(potential_moxie_table$beta)  & 
                                   potential_moxie_table$beta > 0 & potential_moxie_table$n_people > nrow(ecc) * 0.10,]
    drr <- dft[dft$unique_signature %in% dft$unique_signature[dft$length_uniques_feature_size == max_depth], c("unique_signature","stability")]
    udr <- unique(drr$unique_signature)
    dyy <- data.frame(unique_signature = NA_character_, stability = NA_real_)
    for(i in 1:length(udr)){
      dyy <- rbind(dyy, drr[which(drr$unique_signature %in% udr[i])[1],])
    }
    dyy <- dyy[-1,]
    K <- dyy[!(dyy$unique_signature %in% wwr$unique_signature),]
    
    ddys <- dyy[order(dyy$stability, decreasing = T),]
    wwr$p2n_ratio <-  (sort(K$stability, decreasing = T)[1])/(wwr$stability)
    wwr$stability_perc <- 100*wwr$stability/(as.numeric(fds)[names(fds) == max_depth])
    wwr$max_depth <- max_depth
    
    c_wwr <- rbind(c_wwr, wwr)
    
  }
  
  c_wwr <- c_wwr[-1,]
  
  if(!is.na(c_wwr$unique_signature[1]) ){
    
    rwn <- rownames(c_wwr)[c_wwr$length_uniques_feature_size != c_wwr$max_depth & c_wwr$p2n_ratio > 2/3]
    rwn <- c(rwn, rownames(c_wwr)[c_wwr$length_uniques_feature_size == c_wwr$max_depth & (c_wwr$p2n_ratio > 1)])
    rwn <- rwn[!is.na(rwn)]
    if(length(rwn) != 0){
      c_wwr <- c_wwr[!(rownames(c_wwr) %in% rwn),]
    }
  }  
  
  if(length(c_wwr$unique_signature) ==0){
    final_tab <- c_wwr
    final_tab[1,1] <- "No Interaction"
    final_tab$freq_each_unique_signature  <- NA_real_
  } else if (length(c_wwr$unique_signature) != 0){
    c_wwr_uf <- c_wwr
    if(length(c_wwr_uf$unique_signature) != 0){
      c_wwr_uf$freq_each_unique_signature <- rep(NA_real_, nrow(c_wwr_uf))
      
      ch_oc <- data.frame(charac = names(table(unlist(strsplit(c_wwr_uf$unique_signature,"/")))), 
                          frq = as.numeric(table(unlist(strsplit(c_wwr_uf$unique_signature,"/")))))
      
      for(i in 1:nrow(c_wwr_uf)){
        c_wwr_uf$freq_each_unique_signature[i] <- paste(ch_oc$frq[ch_oc$charac %in% strsplit(c_wwr_uf$unique_signature[i],"/")[[1]]], collapse = "/")
      }
    }
    
    drtp <- unlist(lapply((strsplit(c_wwr_uf$freq_each_unique_signature,"/")), function(x){sum(x %in% c("1"))}))
    while (sum(drtp == 1)!=0) {
      rrt <- which(drtp >= 1)
      c_wwr_uf <- c_wwr_uf[-rrt,]
      if(length(c_wwr_uf$unique_signature)==0){break}
      ch_oc <- data.frame(charac = names(table(unlist(strsplit(c_wwr_uf$unique_signature,"/")))), 
                          frq = as.numeric(table(unlist(strsplit(c_wwr_uf$unique_signature,"/")))))
      
      for(i in 1:nrow(c_wwr_uf)){
        c_wwr_uf$freq_each_unique_signature[i] <- paste(ch_oc$frq[ch_oc$charac %in% strsplit(c_wwr_uf$unique_signature[i],"/")[[1]]], collapse = "/")
      }
      drtp <- unlist(lapply((strsplit(c_wwr_uf$freq_each_unique_signature,"/")), function(x){sum(x %in% c("1"))}))
      if(length(drtp)==0){break}
      
    }
    
    if(length(c_wwr_uf$unique_signature) != 0){
      c_wwr_n <- c_wwr_uf[c_wwr_uf$n_people/n < 1/3 & c_wwr_uf$stability_perc>1,]
    } else if (length(c_wwr_uf$unique_signature) == 0){
      c_wwr_n <- c_wwr_uf
    }
    
    if(length(c_wwr_uf$unique_signature) != 0 & length(c_wwr_n$unique_signature) != 0){
      rrt <- which(unlist(lapply((strsplit(c_wwr_n$freq_each_unique_signature,"/")), function(x){sum(x %in% c("1"))})) >= 1)
      if(length(rrt)!=0){
        final_tab <- c_wwr_n[-rrt,]
        if(length(final_tab$unique_signature) == 0){
          final_tab[1,1] <- "No Interaction"
        }
      } else if (length(rrt)==0){
        final_tab <- c_wwr_n
      }  
    } else if(length(c_wwr_n$unique_signature) == 0 | length(c_wwr_uf$unique_signature) == 0 ){
      final_tab <- c_wwr_n
      final_tab[1,1] <- "No Interaction"
      final_tab$freq_each_unique_signature  <- NA_real_
    }
    
 }


